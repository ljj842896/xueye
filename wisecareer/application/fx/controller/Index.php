<?php
namespace app\fx\controller;
use app\common\Caches;
use app\common\Jssdk;
use app\common\model\UserRetail;
use app\common\StringRsa;
use app\index\controller\Basics;
use think\Controller; 
use think\Db;
use think\facade\Config;


class Index extends Basics
{

    public function initialize ()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $host = $this->request->domain();
        $jssdk = new Jssdk($host);
        $signPackage = $jssdk->GetSignPackage();
		 $this->assign('signPackage',$signPackage);
		 $userid = session('islogin'); 	
		 $this->assign('userid',$userid);  
		 
		 $sessiontype = session('sessiontype'); 
		 $this->assign('sessiontype',$sessiontype);  
    }

    public function index()
    {
        $token = $this->request->param('token');
        $uid = session('islogin');
        $type = $this->request->param('type'); //1  学业 2 职拓
        if($token) {
            $tokens = StringRsa::getUserIDFromToken($token);
     	if($tokens){
                session('islogin', $tokens['id']);
                $uid = $tokens['id'];
		}else{
              //  return $this->error('没有登录请先登录','/index/login');
                //$this->error('没有登录请先登录','/index/login');
            }
        }elseif(!$uid){
            return $this->error('没有登录请先登录','/index/login');
        }
 
		$sessiontype = session('sessiontype'); 
		$type = $this->request->param('type'); //1  学业 2 职拓
		
		if(is_numeric($sessiontype)){ 
			 $sesype = session('sessiontype'); 
		}else{
			 if($type==1 || $type==2){
			    session('sessiontype', $type);  // 上级ID sessio 
			 }else{
				  session('sessiontype', 2);  // 上级ID sessio 
		 	 }
			 $sesype = session('sessiontype'); 
	 }
			
			
			$this->assign('sessiontype',$sesype);  
 
		  
		   $tokenuser= StringRsa::createUserToken($uid);   //加密token
		 $this->assign('token',$tokenuser);   

       
        return $this->fetch();

    }

    public function reg()
    {

        return $this->fetch();
    }


    public function become()
    {
        $token = $this->request->param('token');
        $uid = session('islogin'); 
		 

        if($token) {
            $tokens = StringRsa::getUserIDFromToken($token);
            if($tokens){
                session('islogin', $tokens['id']);
                $uid = $tokens['id'];
            }else{
                return $this->error('没有登录请先登录','/index/login');
                //$this->error('没有登录请先登录','/index/login');
            }
        }elseif(!$uid){
            return $this->error('没有登录请先登录','/index/login');
        } 
		 
			$type = $this->request->param('type'); //1  学业 2 职拓
	 
			if($type==1 || $type==2){
			    session('sessiontype', $type);  // 上级ID sessio 
			 }else{
				  session('sessiontype', 2);  // 上级ID sessio 
		 	 }
			
			$sessiontype = session('sessiontype');  

			$this->assign('sessiontype',$sessiontype);      
       
		 $tokenuser= StringRsa::createUserToken($uid);   //加密token
		$this->assign('token',$tokenuser);    
				
        return $this->fetch();

    }
    public function sign(){


        $token = $this->request->param('token');
        $uid = session('islogin');
        $type = $this->request->param('type'); //1  学业 2 职拓
        if($token) {
            $tokens = StringRsa::getUserIDFromToken($token);
            if($tokens){
                session('islogin', $tokens['id']);
                $uid = $tokens['id'];
            }else{
                return $this->error('没有登录请先登录','/index/login');
                //$this->error('没有登录请先登录','/index/login');
            }
        }elseif(!$uid){
            return $this->error('没有登录请先登录','/index/login');
        }


        $uid = $uid;
        $time = date('Y-m-d',$this->request->time());
        $d = date('d',$this->request->time());
        if($this->request->isAjax()){
            if(input('sign')==1){
                $data  = UserRetail::name('user_retail_sign')->where('uid',$uid)->find();
                if($data !=null && $data['lasttime']!=0 ){
                    if($data['lasttime'] !=$time){

                        $newsign = $data['signhistory']+ pow(2,(31-$d));
                        $count = $data['count']+1;

                         if($d ==1){
                             $signcount = 1;
                         }else{
                             $days = datediff($data['lasttime']);

                             if($days ==1 ){
                                 $signcount = $data['signcount']+1;
                             }else{
                                 $signcount = 1;
                             }

                         }
                        $update = ['uid'=>$uid,'signcount'=>$signcount,'count'=>$count,'lasttime'=>$time,'signhistory'=>$newsign];
                        UserRetail::name('user_retail_sign')->where('uid',$uid)->update($update);
                        echo 1;
                    }
                    exit;
                }else{
                    $sign = pow(2,(31-$d));
                    $insertdata = ['uid'=>$uid,'signcount'=>1,'count'=>1,'lasttime'=>$time,'signhistory'=>$sign];
                    UserRetail::name('user_retail_sign')->insert($insertdata);
                    echo 1;exit;
                } 
            }
        }
    }
    public function subordinate()
    {
		 
        $token = $this->request->param('token');
         $uid = session('islogin');
        $type = $this->request->param('type'); //1  学业 2 职拓
        if($token) {
            $tokens = StringRsa::getUserIDFromToken($token);
            if($tokens){
                session('islogin', $tokens['id']);
                $uid = $tokens['id'];
            }else{
                return $this->error('没有登录请先登录','/index/login');
                //$this->error('没有登录请先登录','/index/login');
            }
        }elseif(!$uid){
            return $this->error('没有登录请先登录','/index/login');
        } 
 
       /* $userInfo = Caches::MyuserInfo($uid);
        $data = UserRetail::where('uid',$uid)->find();

        $this->assign('userinfo',$userInfo);
        $this->assign('data',$data); 
        $data2 = UserRetail::where('superiorUID',$uid)->field('uid,commission,money')->select();
  		$supcount = UserRetail::where('superiorUID',$uid)->count();
 		$nbid = 1 ;
        foreach ($data2  as $key =>$value){
			$data2[$key]['nbid'] = $nbid++;  
			$data2[$key]['username'] = Db::name('myuser')->where('id',$value['uid'])->value('user_name'); 
			$data2[$key]['moneynum'] = Db::name('user_retail_commission')->where('userid',$value['uid'])->sum('money');
			$data2[$key]['num'] = UserRetail::where('superiorUID',$value['uid'])->count();
        }
 
        $count = count($data2);

        $this->assign('data2',$data2);*/
 
				$tokenjia= StringRsa::createUserToken($uid);   //加密token
				$this->assign('token',$tokenjia);   
				$sessiontype = session('sessiontype'); 
			$this->assign('sessiontype',$sessiontype);  
			
				return $this->fetch(); 
    }

     public function subordinate2()
        { 

            $token = $this->request->param('token');
            $uid = session('islogin');
            $type = $this->request->param('type'); //1  学业 2 职拓
            if($token) {
                $tokens = StringRsa::getUserIDFromToken($token);
                if($tokens){
                    session('islogin', $tokens['id']);
                    $uid = $tokens['id'];
                }else{
                    return $this->error('没有登录请先登录','/index/login');
                    //$this->error('没有登录请先登录','/index/login');
                }
            }elseif(!$uid){
                return $this->error('没有登录请先登录','/index/login');
            }

          /*  $userInfo = Caches::MyuserInfo($uid);
            $data = UserRetail::where('uid',$uid)->find();

            $this->assign('userinfo',$userInfo);
            $this->assign('data',$data);

            $data2 = UserRetail::where('superiorUID',$uid)->field('uid,commission,money')->select();


            foreach ($data2  as $key =>$value){
                $data2[$key]['num'] = UserRetail::where('superiorUID',$value['uid'])->count();
            }


            $count = count($data2);
            $this->assign('count',$count);
            $this->assign('data2',$data2);*/
			
			$sessiontype = session('sessiontype'); 
			$this->assign('sessiontype',$sessiontype);  
				
			 $token= StringRsa::createUserToken($uid);   //加密token
				$this->assign('token',$token);   

            return $this->fetch();

        }


    public function login()
    {

        return $this->fetch();
    }
    public function password()
    { 
        return $this->fetch();
    }

    public function cash()
    {
        $uid = session('islogin');
	
        if(!$uid){
            return $this->error('没有登录请先登录','/index/login');
        }
	 
	  $usermoney =UserRetail::where('uid',$uid)->value('money');  //用户提现余额
      	 $sessiontype = session('sessiontype'); 
		 $this->assign('usermoney',$usermoney);   
		 $this->assign('sessiontype',$sessiontype);      
		 $tokenuser= StringRsa::createUserToken($uid);   //加密token
		$this->assign('token',$tokenuser);   
		
        return $this->fetch();
    }

    public function cash_list()
        {
           $uid = session('islogin');	 
		  if(!$uid){
			  return $this->error('没有登录请先登录','/index/login');
		  }  
		  
 	//$data = UserRetail::name('user_retail_detail')->where('uid',$uid)->select();
       $sessiontype = session('sessiontype'); 
			$this->assign('sessiontype',$sessiontype);      
       
		 $tokenuser= StringRsa::createUserToken($uid);   //加密token
		$this->assign('token',$tokenuser);   
            return $this->fetch();
     }
 
    public function detailed()
    { 
        return $this->fetch();
    }

      public function agreement()
        { 
            return $this->fetch();
        }
		
  public function commission_list()
        {  
				$uid = session('islogin'); 
				$sessiontype = session('sessiontype'); 
			$this->assign('sessiontype',$sessiontype);      
       
		 $tokenuser= StringRsa::createUserToken($uid);   //加密token
		$this->assign('token',$tokenuser);   
				return $this->fetch(); 
        }
 		
	public function about()
		{
				return $this->fetch();
		}
		
	//分销商页面
	public function qrcode()
	{
		
		$uid = session('islogin'); 
		$sessiontype = session('sessiontype'); 
		$this->assign('sessiontype',$sessiontype);   
		$token= StringRsa::createUserToken($uid);   //加密token
		$qrcodepic = Db::name('user_retail')->where('uid',$uid)->value('pic');
		$xy_qrcodepic = Db::name('user_retail')->where('uid',$uid)->value('xypic');
		if($sessiontype==1){
			$this->assign('qrcodepic',$xy_qrcodepic);   
		}else{
			$this->assign('qrcodepic',$qrcodepic);   
		}
		$this->assign('token',$token);  
		
		return $this->fetch(); 
	}
		
   public function help_list()
     {

         return $this->fetch();
     }

  public function help2()
                    {
	    $uid = session('islogin'); 
		 $sessiontype = session('sessiontype'); 
		 $this->assign('sessiontype',$sessiontype);   
		$uid = session('islogin');  
		$token= StringRsa::createUserToken($uid);   //加密token
		$qrcodepic = Db::name('user_retail')->where('uid',$uid)->value('pic');
		$this->assign('token',$token);  
		$this->assign('qrcodepic',$qrcodepic);  
		return $this->fetch(); 
		  
		   }
        public function help()
          {

              return $this->fetch();
          }



           public function user()
             {

                 return $this->fetch();
             }

	//分销商二维码处理 
	public function distributor()
	  { 	
	  
			$uid = session('islogin');   
	 
				$user_ret_id = $this->request->param('userid');
		  
		 		$type = $this->request->param('type'); //1  学业 2 职拓  
				
			 if($type==1){
					session('sessiontype', $type);  // 上级ID sessio 
			  }else{
					  session('sessiontype', 2);  // 上级ID sessio 
			  }
			  
				$sesype = session('sessiontype');  
				$this->assign('sessiontype',$sesype);   
				$uid = session('islogin'); 
				$sessiontype = session('sessiontype'); 
				$this->assign('sessiontype',$sessiontype);   
				session('superiorUID', $user_ret_id);  // 上级ID sessio 
				$superiorUID = session('superiorUID');   
				$token= StringRsa::createUserToken($uid);   //加密token 
				$this->assign('token',$token);  
				$this->assign('superiorUID',$superiorUID);    
				return $this->fetch();   
		}    

}
